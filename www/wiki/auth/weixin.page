<?npl
--[[
Title: oauth handler for `satellizer oauth framework`
Author: LiXizhi
Date: 2016/5/10
]]

local accessTokenUrl = 'https://api.weixin.qq.com/sns/oauth2/access_token'
local userApiUrl = 'https://api.weixin.qq.com/sns/userinfo'

local serviceName = "weixin"
local params = {
	grant_type="authorization_code",
	code = request:get("code"),
	appid = request:get("clientId"),
	secret = KEEPWORK["config"][CURRENT_ENV]["threeService"]["weixin"]["client_secret"],
	redirect_uri = request:get("redirectUri"),
}

response:Begin()
-- Step 1. Exchange authorization code for access token.
util.GetUrl({url = accessTokenUrl, qs = params }, resume)
local err, data = yield()
data = commonlib.Json.Decode(data.data)
if((not data) or (data.errcode)) then
	return response:send({error=1, message="access token invaild"})
end

LOG.std(nil, "error", "keepwork", data)

local serviceId = data.openid
local accessToken = data.access_token

util.GetUrl({url=userApiUrl, qs={access_token=accessToken, openid=serviceId}}, resume)
local err, data = yield()

LOG.std(nil, "error", "keepwork", data.data)
data = commonlib.Json.Decode(data.data)
--log(data)

local serviceUsername = data.nickname

-- 未登录
db.user_three_service:findOne({["+serviceId+serviceName"]={serviceId, serviceName}}, resume)
local err, userThreeService = yield()

-- 是否已经登录
local username = getUsername()
if username then
	if (userThreeService and userThreeService.username and userThreeService.username ~= username) then
		return response:send({error=2, token="token", message="账号已被绑定:" .. userThreeService.username})
	end

	db.user_three_service:insertOne({["+serviceId+serviceName"]={serviceId, serviceName}}, {username=username, serviceId=serviceId, serviceName=serviceName, token=accessToken, serviceUsername=serviceUsername},resume)
	yield()

	return response:send({token = "token", error=0, message="OK"})
end

-- 没有绑定
if not userThreeService then
	db.user_three_service:insertOne({["+serviceId+serviceName"]={serviceId, serviceName}}, {serviceId=serviceId, serviceName=serviceName, token=accessToken, serviceUsername=serviceUsername}, resume)
	yield()
	return response:send({error=0, token="token", data={serviceId=serviceId, access_token=accessToken, serviceName=serviceName}, message="user not found"})
else
	if not userThreeService.serviceUsername then
		db.user_three_service:updateOne({["+serviceId+serviceName"]={serviceId, serviceName}}, {serviceUsername=serviceUsername}, resume)
		yield()
	end
end

if not userThreeService.username then
	return response:send({error=0, token="token", data={serviceId=serviceId, access_token=accessToken, serviceName=serviceName}, message="user not found"})
end

db.user:findOne({["+username"]={userThreeService.username}}, resume)
local err, userinfo = yield()

if not userinfo then
	return response:send({error=0, token="token", data={serviceId=serviceId, access_token=accessToken, serviceName=serviceName}, message="user not found"})
end

local token = encodeJWT({userId=userinfo._id, username=userinfo.username})
setAuthCookie(token)
return response:send({token = token, data = userinfo, error=0, message="OK"})

