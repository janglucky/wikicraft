<?npl
--[[
Title: big file list
Author: wuxiangan
Date: 2017/09/11
]]

include_once("./abstract/base.page")
include_once("./qiniu.page")
include_once("./qiniu_files.page")
include_once("./user.page")

local bigfile = inherit(models.abstract.base, gettable("models.bigfile"))
bigfile.db_name = "bigfile"

function bigfile:ctor()
	self:addfield("username", "string") -- username
	self:addfield("filename", "string") -- filename
	self:addfield("channel", "string") -- 存贮方式 qiniu  youku  
	self:addfield("source_url", "string") -- channel=none 网络视屏地址
	self:addfield("file_id", "number") -- channel ~= none 文件id
	self:addfield("size", "number")  -- 文件大小
	self:addfield("checked", "number")  -- 审核状态    1 - 通过  2 - 审核不通过   0 - 未审核

	self:addfield("updateDate", "string")     -- 最近使用时间
	self:addfield("createDate", "string")     -- 创建时间
end


function bigfile:api_test()
	return "hello world"
end

function bigfile:api_upsert(params)
	ensureAuthenticated()

	if not params.channel then
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end

	-- files of special users are not necessary to be checked
	params.checked = 0
	local user = getUser()
	if util:isInTable(user.roleId, const.DONT_CHECK_WHOES_FILES) then params.checked = 1 end

	params.updateDate = ParaGlobal.GetDateFormat("yyyy-MM-dd") .. " " .. ParaGlobal.GetTimeFormat("HH:mm:ss")
	params.createDate = params.createDate or (ParaGlobal.GetDateFormat("yyyy-MM-dd") .. " " .. ParaGlobal.GetTimeFormat("HH:mm:ss"))

	if params._id then
		self:db():updateOne({_id=params._id}, params, resume)
	else
		self:db():insertOne(nil, params, resume)
	end

	return errors:wrap(yield())
end


function bigfile:api_deleteById(params)
	if not params._id then
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end
	
	self:db():findOne({_id=params._id}, resume)
	local _, bf = yield()

	if not bf then
		LOG.std(nil, "error", "keepwork", "not found")
		return errors:wrap(errors.NOT_FOUND)
	end

	if bf.channel == const.BIGFILE_QINIU and bf.file_id then
		local qiniuDB = models.qiniu:new()
		local ret = qiniuDB:api_deleteByFileId({file_id=bf.file_id}).error
		--LOG.std(nil, "error", "keepwork", ret)
		if errors:isError(ret) then
			--LOG.std(nil, "error", "keepwork", "------------------")
			return errors:wrap(ret)
		end
	end

	self:db():deleteOne({_id=params._id})
	return errors:wrap(nil)
end


function bigfile:api_getDownloadUrlById(params)
	if not params._id then 
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end

	self:db():findOne({_id=params._id}, resume)
	local _, bf = yield()

	if not bf then
		return errors:wrap(errors.NOT_FOUND)
	end

	bf.checked = tonumber(bf.checked) or 0
	if bf.checked ~= 1 then
		errors:raise(403, "the file was banned or has not been checked")
	end

	local download_url = ""
	if bf.channel == const.BIGFILE_QINIU then
		local qiniuFileDB = models.qiniu_files:new()
		download_url = qiniuFileDB:api_getDownloadUrlById({_id=bf.file_id}).data
	else
		download_url = bf.source_url
	end
	
	return errors:wrap(nil, download_url)
end

function bigfile:api_getDownloadUrlByKey(params)
	if not params.key then 
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end

	local qiniuFileDB = models.qiniu_files:new()
	download_url = qiniuFileDB:api_getDownloadUrlByKey(params).data

	return errors:wrap(nil, download_url)
end

function bigfile:deleteFile(params)
	local qiniuDB = models.qiniu:new()

	if params.channel == const.BIGFILE_QINIU and params.file_id then
		local ret = qiniuDB:api_deleteByFileId({file_id=params.file_id})
		if ret.error.id == 0 then
			return true
		end
	end

	return false
end

-- 改变文件名
function bigfile:api_changeFilename(params)
	local username = getUsername()

	if not username or not params._id or not params.filename then
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end

	self:db():findOne({_id=params._id}, resume)
	local err, bf = yield()
	if not bf then
		errors:raise(404, "file not found")
	end

	if bf.username ~= username then
		errors:raise(403, "you are not allowed to change the name of this file")
	end

	local qiniuFileDB = models.qiniu_files:new()
	qiniuFileDB:changeFilename({filename=params.filename, _id=bf.file_id})

	params.updateDate = ParaGlobal.GetDateFormat("yyyy-MM-dd")
	self:db():updateOne({_id=params._id},{filename=params.filename}, resume)
	err, bf = yield()

	return errors:wrap(err)
end

-- 上传文件
function bigfile:api_upload(params)
	local username = getUsername()
	if not username or not params.channel or not params.filename then
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end

	self:db():findOne({["+username+filename"]={username, params.filename}}, resume)
	local _, data = yield()

	if data then
		self:deleteFile(data)
	end

	data = data or {}
	data.username=username
	data.channel=params.channel
	data.filename=params.filename

	if params.channel == const.BIGFILE_QINIU then
		local qiniuDB = models.qiniu:new()
		local ret = qiniuDB:api_upload(params)
		if ret.error.id ~= 0 then
			return ret
		end
		data.file_id = ret.data._id
	else
		if not params.download_url then
			return errors:wrap(errors.REQUEST_PARAMS_ERROR)
		end
		data.source_url = params.download_url
	end

	return self:api_upsert(data)
end


-- 获取用户大文件列表
function bigfile:api_getByUsername(params)
	local username = getUsername()

	local skip, limit = util:pagination(params)

	self:db():count({["+username"]={username}}, resume)
	local _, total = yield()

	self:db():find({["+username"]={username, skip=skip, limit=limit}}, resume)
	local _, bfs = yield()

	--log(bfs)

	local qiniuFilesDB = models.qiniu_files:new()
	for _, bf in ipairs(bfs or {}) do
		bf.checked = bf.checked or 0
		if bf.checked ~= 1 then
			bf.source_url = nil
		end
		if bf.channel == const.BIGFILE_QINIU then
			bf.file = qiniuFilesDB:api_getById({_id=bf.file_id}).data
		end
	end

	return errors:wrap(nil, {total=total or 0, filelist = bfs})
end


 --更新文件
function bigfile:api_updateById(params)
	local user = getUser()
	local username = user.username
	if not params._id or not params.channel or not params.filename then
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end

	self:db():findOne({_id=params._id}, resume)
	local _, data = yield()

	if not data or data.username ~= username then
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end

	if not self:deleteFile(data) then 
		return errors:wrap("旧文件无法删除")
	end

	local new_data = {}
	local qiniuDB = models.qiniu:new()
	new_data.username = username
	new_data.channel = params.channel
	new_data.filename = params.filename

	new_data.checked = 0
	if util:isInTable(user.roleId, const.DONT_CHECK_WHOES_FILES) then new_data.checked = 1 end

	if params.channel == const.BIGFILE_QINIU then
		local qiniuDB = models.qiniu:new()
		local ret = qiniuDB:api_upload(params)
		if ret.error.id ~= 0 then
			return ret
		end
		new_data.file_id = ret.data._id
	else
		if not params.download_url then
			return errors:wrap(errors.REQUEST_PARAMS_ERROR)
		end
		new_data.source_url = params.download_url
	end

	self:db():updateOne({_id=params._id}, new_data, resume)
	return errors:wrap(yield())
end

function bigfile:api_getByFilename(params)
	local username = getUsername()

	if not username or not params.filename then
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end

	self:db():findOne({["+username+filename"]={username, params.filename}}, resume)
	local err, bf = yield()
	if bf then
		bf.checked = bf.checked or 0
		if bf.checked ~= 1 then
			bf.source_url = nil
		end
	end
	return errors:wrap(err, bf)
end


function bigfile:api_getByFilenameList(params)
	local filelist = params.filelist
	local files = {}

	for _, filename in ipairs(filelist or {}) do
		files[#files+1] = self:api_getByFilename({filename=filename}).data
	end

	return errors:wrap(nil, files)
end


function bigfile:api_getUserStoreInfo(params)
	local username = getUsername()

	if not username then
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end

	local userDB = models.user:new()
	if userDB:is_locked({username = username}) then
		errors:raise(403, "该帐号已被封禁")
	end

	local qiniuDB = models.qiniu:new()

	return qiniuDB:api_getByUsername({username=username})
end
