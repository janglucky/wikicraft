<?npl
--[[
Title: qiniu file list
Author: wuxiangan
Date: 2017/09/11
]]

include_once("./abstract/base.page")
include_once("./qiniu.page")

local qiniu_files = inherit(models.abstract.base, gettable("models.qiniu_files"))
qiniu_files.db_name = "qiniu_files"

function qiniu_files:ctor() 
	self:addfield("username", "string")     -- 用户名
	--self:addfield("filename", "string")     -- 文件名
	self:addfield("domain", "string")       -- 域名
	self:addfield("key", "string")          -- 文件名
	self:addfield("download_url", "string") -- 下载url
	self:addfield("hash", "string")         -- hash
	self:addfield("type", "string")         -- hash
	self:addfield("size", "number")         -- file size
	self:addfield("checked", "number")      -- 审核状态    1 - 通过  2 - 审核不通过   0 - 未审核

	self:addfield("usedCount", "number")      -- 使用次数
	self:addfield("updateDate", "string")     -- 最近使用时间
	self:addfield("createDate", "string")     -- 创建时间
end

-- 添加记录
function qiniu_files:api_upsert(params)
	ensureAuthenticated()

	params.checked = 0
	local user = getUser()
	local username = user.username
	if util:isInTable(user.roleId, const.DONT_CHECK_WHOES_FILES) then params.checked = 1 end

	if not params.username or not params.domain or not params.key or params.size < 0 or params.username ~= username then
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end

	params.updateDate = ParaGlobal.GetDateFormat("yyyy-MM-dd")
	params.createDate = params.createDate or ParaGlobal.GetDateFormat("yyyy-MM-dd")
	params.usedCount = (params.usedCount or 0) + 1

	self:db():insertOne({["+username+domain+key"]={params.username, params.domain, params.key}}, params, resume)
	--self:db():insertOne({["+username+filename"]={params.username, params.filename}}, params, resume)

	return errors:wrap(yield())
end


-- 通过id获取记录
function qiniu_files:api_getById(params)
	if not params._id then
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end

	self:db():findOne({_id=params._id}, resume)
	local err, file = yield()

	if tonumber(file.checked) ~= 1 then
		file.download_url = nil
		file.key = nil
	end

	return errors:wrap(err, file)
end

-- 通过id删除文件
function qiniu_files:api_deleteById(params)
	if not params._id then
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end

	self:db():deleteOne({_id=params._id}, resume)

	return errors:wrap(yield())
end


-- 获取用户文件列表
function qiniu_files:api_getByUsername(params)
	local username = getUsername()

	if not username then
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end

	local skip, limit = util:pagination(params)

	self:db():count({["+username"]={params.username}}, resume)
	local _, total = yield()

	self:db():find({["+username"]={username, skip=skip, limit=limit}}, resume)
	local _, list = yield()
	
	for i, bf in ipairs(list) do
		bf.checked = tonumber(bf.checked) or 0
		if bf.checked ~= 1 then
			bf.source_url = nil
			bf.key = nil
		end
	end

	return errors:wrap(nil, {total=total or 0, list=list});
end

-- 通过id获取download_url
function qiniu_files:api_getDownloadUrlById(params)
	if not params._id then
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end

	self:db():findOne({_id=params._id}, resume)
	local _, qiniuFiles = yield()

	if not qiniuFiles then
		return errors:wrap(errors.NOT_FOUND)
	end

	qiniuFiles.checked = tonumber(qiniuFiles.checked) or 0
	if qiniuFiles.checked ~= 1 then
		errors:raise(403, "the file was banned or has not been checked")
	end

	local qiniuDB = models.qiniu:new()
	local download_url = qiniuDB:api_getDownloadUrl(qiniuFiles).data
	download_url = download_url and download_url.download_url

	return errors:wrap(nil, download_url or qiniuFiles.download_url)
end

-- 通过key获取download_url
function qiniu_files:api_getDownloadUrlByKey(params)
	if not params.key then
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end

	self:db():findOne({key=params.key}, resume)
	local _, qiniuFiles = yield()

	if not qiniuFiles then
		return errors:wrap(errors.NOT_FOUND)
	end

	qiniuFiles.checked = tonumber(qiniuFiles.checked) or 0
	if qiniuFiles.checked ~= 1 then
		errors:raise(403, "the file was banned or has not been checked")
	end

	local qiniuDB = models.qiniu:new()
	local download_url = qiniuDB:api_getDownloadUrl(qiniuFiles).data
	download_url = download_url and download_url.download_url

	return errors:wrap(nil, download_url or qiniuFiles.download_url)
end

-- export data
function qiniu_files:api_export()
	self:db():find({_id={gt=0, limit=1000000}}, resume)

	local _, list = yield()
	local userDB = models.user:new()
	
	for _, item in ipairs(list or {}) do
		userDB:db():findOne({["+username"] = {item.username}}, resume)
		local _, data = yield()
		if data then item.userId = data._id end
	end
	return list
end

function qiniu_files:changeFilename(params)
	self:db():updateOne({_id=params._id},{filename=params.filename}, resume)
	return yield()
end
