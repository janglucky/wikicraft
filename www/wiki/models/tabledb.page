<?npl
--[[
Title: table db
Author: wuxiangan
Date: 2017/07/09
]]

NPL.load("(gl)script/ide/Files.lua")

include_once("./abstract/base.page")

local tabledb = inherit(models.abstract.base, gettable("models.tabledb"))
tabledb.db_name = "tabledb"

local defaultTableDB = db

-- 管理员认证
function tabledb:ensureAdmin()
	local token = getTokenInfo()
	if (not token) or (token.roleId ~= const.USER_ROLE_MANAGER and token.roleId ~= const.USER_ROLE_ADMINISTRATOR) then
		response:status(401):send({ message = "无权限访问"})
		exit()
	end

	return token
end

function tabledb:api_getTables(params)
	self:ensureAdmin()

	local tableNames = {}
	local databaseDir = WIKI_DB_PATH
	local files = commonlib.Files.Find(nil, databaseDir, 0, 500, "*.db", nil)
	for i, file in ipairs(files or {}) do
		tableNames[#tableNames+1] = string.match(file.filename,"(.*)%.")
	end
	return errors:wrap(nil, tableNames)
end

function tabledb:api_getIndexes(params)
	self:ensureAdmin()
	if not params.tableName then
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end

	local tableName = params.tableName
	local table = defaultTableDB:collection(tableName)
	table:exec("SELECT name as indexName FROM indexes", resume(err, rows))
	local err, rows = yield()
	local indexes = {}
	for i, obj in pairs(rows or {}) do
		for j, value in pairs(obj or {}) do
			indexes[#indexes + 1] = value
		end
	end

	return indexes
end

--function tabledb:api_getTableRecord(params)
--if not params.tableName then
--return errors:wrap(errors.REQUEST_PARAMS_ERROR)
--end

--local table = defaultTableDB[params.tableName]
--local skip, limit = util:pagination(params)
--table:find({_id={gt=0, skip=skip, limit=limit}}, resume)
--local _, data = yield()
--table:count({}, resume)
--local _, total = yield()
--return errors:wrap(nil, {total=total, data=data})
--end

function tabledb:api_queryById(params)
	self:ensureAdmin()
	if not params.tableName or not params._id then
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end

	local table = defaultTableDB[params.tableName]
	table:findOne({_id=tonumber(params._id)}, resume)
	local _, data = yield()
	return errors:wrap(nil, {total=1, data={data}})
end

function tabledb:api_query(params)
	self:ensureAdmin()
	if not params.tableName then
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end

	if params.query and params.query._id then
		return self:api_queryById({tableName=params.tableName, _id=params.query._id})
	end

	local table = defaultTableDB[params.tableName]
	local skip, limit = util:pagination(params)
	local query = params.query or {}
	local key = ""
	local value = {}
	for k, v in pairs(query or {}) do
		key = key .. "+" .. k
		value[#value+1] = v
	end

	if key == "" then
		table:count({}, resume)
		local _, total = yield()
		table:find({_id={gt=0, skip=skip, limit=limit}}, resume)
		local _, data = yield()
		return errors:wrap(nil,{total=total,data=data})
	end

	local queryParams = {}
	queryParams[key] = value
	table:count(queryParams, resume)
	local _, total = yield()

	value["skip"] = skip
	value["limit"] = limit
	table:find(queryParams, resume)
	local _, data = yield()

	return errors:wrap(nil,{total=total,data=data})
end


function tabledb:api_upsert(params)
	self:ensureAdmin()
	if not params.tableName then
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end

	local table = defaultTableDB[params.tableName]
    local record = params.query or {}

    local function insert(v)
        if v._id then
            table:updateOne({_id=v._id}, v, resume)
        else
            table:insertOne(nil, v, resume)
        end
        return errors:wrap(yield())
    end

    if params.tableName == "sensitive_words" then
        reset_aho_corasick()
    end

    if not util:isArray(record) then
        return insert(record)
    else
        local result = {}
        for k, v in pairs(record) do
            result[#result+1] = insert(v)
        end
        return errors:wrap(nil, result)
    end
end

function tabledb:api_delete(params)
	self:ensureAdmin()
	if not params.tableName then
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end

	local table = defaultTableDB[params.tableName]
	local record = params.query or {}

	local query, pageQuery, isAll = util:getQueryObj(record)

	--if isAll then
		--return errors:wrap(nil, {message="无法删除整张表"})
	--end

    log(query)

    local function delete(v)
        table:delete(v, resume)
        return errors:wrap(yield())
    end

    if params.tableName == "sensitive_words" then
        reset_aho_corasick()
    end

    if not util:isArray(record) then
        return delete(record)
    else
        local result = {}
        for k, v in pairs(record) do
            result[#result+1] = delete(v)
        end
        return errors:wrap(nil, result)
    end
end


function tabledb:api_getIndexes(params)
	self:ensureAdmin()
	if not params.tableName then
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end

	local table = defaultTableDB[params.tableName]

	table:exec("SELECT name as indexName FROM indexes;", resume)

	local _, rows = yield();
	local indexes = {};
	for i, obj in pairs(rows or {}) do
		for j, value in pairs(obj or {}) do
			indexes[#indexes + 1] = value;
		end
	end

	return errors:wrap(nil, indexes);

end

function tabledb:api_deleteIndex(params)
	self:ensureAdmin()
	if not params.tableName  or not params.indexName then
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end

	local table = defaultTableDB[params.tableName]
	table:removeIndex({params.indexName},  resume)

	return errors:wrap(yield())
end



