<?npl
--[[
Title: user three service
Author: wuxiangan
Date: 2017/04/19
]]


include_once("./abstract/base.page")
include_once("data_source.page")
include_once("./user.page")

local user_three_service = inherit(models.abstract.base, gettable("models.user_three_service"))
user_three_service.db_name = "user_three_service"


function user_three_service:ctor()
	self:addfield("username", "string")        -- 用户名
	self:addfield("serviceId", "string")       -- 第三方服务的id
	self:addfield("serviceName", "string")     -- 第三方服务名称
	self:addfield("serviceUsername", "string") -- 第三方服务的用户名
	self:addfield("token", "string")           -- 第三方服务token
end

-- 插入记录
function user_three_service:api_upsert(params)
	if (not params.serviceId) or (not params.serviceName) then
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end
	
	self:db():insertOne({["+serviceId+serviceName"]={params.serviceId, params.serviceName}}, params, resume)
	
	return errors:wrap(yield())
end

function user_three_service:api_unbind(params)
	if not params.password or not params.id then
		errors:raise(400, 'password and id required')
	end

	local User = models.user:new()
	if not User:verifyPassword(params.password) then
		errors:raise(401, 'invalid password')
	end

	return self:api_deleteById(params)
end

-- 删除第三方服务
function user_three_service:api_deleteById(params)
	self:ensureAuthenticated()
	if not params.id then
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end

	self:db():findOne({_id=params.id}, resume)
	local _, service = yield()

	if not service then
		return errors:wrap()
	end

	if service.username and service.serviceName == "github" then
		local dataSourceDB = models.data_source:new()
		dataSourceDB:api_githubLinkGitlab({
			githubUserId=service.serviceId,
			username=service.username,
			unlink=true,
		})
	end

	self:db():deleteOne({_id=params.id}, resume)
	
	return errors:wrap(yield())
end

-- 获得用户的第三方服务列表
function user_three_service:api_getByUsername(params)
	if not params.username then
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end

	self:db():find({["+username"]={params.username}}, resume)

	return errors:wrap(yield())
end

-- 获得第三方服务
function user_three_service:api_getByService(params)
	if (not params.serviceId) or (not params.serviceName) then
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end

	self:db():findOne({["+serviceId+serviceName"]={params.serviceId, params.serviceName}}, resume)
	
	return errors:wrap(yield())
end
