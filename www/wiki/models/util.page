<?npl 
--[[
Title: website renewal model
Author: wuxiangan
Date: 2016/11/14
]]

-- NPL.load("(gl)script/ide/System/os/GetUrl.lua")

util= util or {}

-- 分页实现
function util:pagination(params)
	local page = params.page or 1
	local pageSize = params.pageSize  or 10
	local skip = (page - 1) * pageSize
	
	params.page = nil
	params.pageSize = nil

	return skip, pageSize
end

-- 获得页数
function util:getPageCount(total, pageSize)
	local m, n = math.modf(total/pageSize)
	
	if n == 0 then
		return m
	end

	return m + 1
end

function util:getGitServerConfig()
	local locale = os.getenv("KEEPWORK_LOCALE") or 'zh_CN'
	local gitServerConfig = KEEPWORK["config"][CURRENT_ENV]["threeService"]["gitlab"][locale] or KEEPWORK["config"][CURRENT_ENV]["threeService"]["gitlab"]
	return gitServerConfig
end

function util:generateSmsCode(cellphone)
	local sms_setting = KEEPWORK["config"][CURRENT_ENV]["threeService"]["sms"]
	local test_sms_code = sms_setting.test_sms_code or "1234"
	local test_phone_numbers = sms_setting.test_phone_numbers or {}
	local is_testing = false
	math.randomseed(os.time())
	local smsCode = tostring(math.random(1000,9999))
	for i, number in ipairs(test_phone_numbers) do
		if (tonumber(cellphone) == tonumber(number)) then
			 smsCode = test_sms_code
			 is_testing = true
			 break
		end
	end
	return smsCode, is_testing
end


-- 获取查询对象
function util:getQueryObj(params)
	local skip, limit = self:pagination(params)
	local key = ""
	local value = {}
	local pageValue = {}
	for k, v in pairs(params or {}) do
		if k ~= "page" and k ~= "pageSize" and k ~= "_id" then
			key = key .. "+" .. k
			value[#value+1] = v
			pageValue[#pageValue+1] = v
		end
	end

	if params._id then
		return {["_id"]=params._id}, {["_id"]=params._id}, false
	elseif key == "" then
		return {}, {_id={gt=0, skip=skip, limit=limit}}, true
	end

	pageValue["skip"] = skip
	pageValue["limit"] = limit

	return {[key]=value}, {[key]=pageValue}, false
end

-- 格式化查询条件 转换成TableDB所需格式
function util:formatQuery(query) 
	if not query then
		return {}
	end

	local result = {}
	for key, value in pairs(query or {}) do
		if key == "page" or key == "pageSize" then
			-- continue
		elseif key == "_id" then
			result["_id"] = tonumber(value)
		else 
			if type(key) == "string" and (type(value) == "string" or type(value) == "number") then
				result[#result+1] = {key, value}
			end
		end
	end
	return result
end

-- 发送邮件
function util:sendEmail(params, callback)
	local emailCfg = KEEPWORK["config"][CURRENT_ENV]["threeService"]["email"]
	par = {}
	par.url = emailCfg.url
	par.username = emailCfg.username
	par.password = emailCfg.password
	par.from = emailCfg.from
	par.to = params.to
	par.subject = params.subject
	par.body = params.body
	
	callback = callback or (function(err, msg) log(err); log(msg); end)
	System.os.SendEmail(par, callback)	
end

-- Determine with a Lua table can be treated as an array.
-- Explicitly returns "not an array" for very sparse arrays.
function util:isArray(table)
	local max = 0
	local count = 0
	for k, v in pairs(table) do
		if type(k) == "number" then
			if k > max then max = k end
			count = count + 1
		else
			return false -- not a array
		end
	end
	if count == 0 or max > count * 2 then
		return false -- not a array
	end
	return max -- return highest index in the table
end


function util:get_username_and_sitename(url)
	local splited_url = commonlib.split(url, "/")
	return splited_url[1], splited_url[2]
end


function util:check_identity(params)
	local allowed = false
	local token = getTokenInfo() or {}
	local username_must_be = token.username
	if not username_must_be then return allowed end
	local username_to_check = params.username

	if params.url then
		username_to_check = self:get_username_and_sitename(params.url)
	end
	if username_to_check == username_must_be then allowed = true end
	return allowed
end


function util:reverse_array(array)
	local reversed_array = {}
	if #array > 0 then
		for i = #array, 1, -1 do
			reversed_array[#reversed_array + 1] = array[i]
		end
	end
	return reversed_array
end


function util:get_reversed_pagination(total, skip, limit)
	if limit >= total then return skip, limit end

	skip = total - skip - limit
	if skip < 0 then
		limit = skip + limit
		skip = 0
	end
	return skip, limit
end


function util:check_script_password(params)
	local script_config = KEEPWORK["config"][CURRENT_ENV]["wiki"]["scripts"] or {}
	local password = script_config["passwd"]
	if not password then return "the password is not be set" end
	if not params.password then return "please input send you password" end
	if password ~= params.password then return "incorrect password" end
	return nil
end


-- compare two datetime str
-- if dt1 is later then dt2, it returns true.
-- else returns false
function util:compare_datetime(dt1, dt2)
	local dt1_ms = commonlib.GetMillisecond_Date(dt1)
	local dt2_ms = commonlib.GetMillisecond_Date(dt2)
	if dt1_ms > dt2_ms then return true end
	return false
end

function util:isInTable(element, t)
	assert(type(t) == 'table', 'the second arguement must be a table')
	for k, v in ipairs(t) do
		if v == element then return true end
	end
	return false
end

-- 自定义常量
const={}

-- 收藏
const.FAVORITE_TYPE_USER = 0
const.FAVORITE_TYPE_WEBSITE = 1

-- 作品状态
const.WEBSITE_WORKS_STATE_APPLY="apply"      -- 申请状态
const.WEBSITE_WORKS_STATE_NORMAL="normal"    -- 正常

-- 作品状态
const.WEBSITE_MEMBER_STATE_APPLY="apply"      -- 申请状态
const.WEBSITE_MEMBER_STATE_NORMAL="normal"    -- 正常

-- 作品标记
const.WEBSITE_WORKS_FLAG_NORMAL=0  -- 普通
const.WEBSITE_WORKS_FLAG_UPGRADE=1 -- 入围
const.WEBSITE_WORKS_FLAG_HOT=2     -- 热门
const.WEBSITE_WORKS_FLAG_PUBLIC = 3 -- 公开组
const.WEBSITE_WORKS_FLAG_STUDENT = 4  -- 学生组

-- 站点申请类型
const.WEBSITE_APPLY_TYPE_MEMBER=0     -- 成员申请
const.WEBSITE_APPLY_TYPE_WORKS=1      -- 作品申请

-- 站点用户角色
const.WEBSITE_USER_ROLE_ADMIN="创建者"   -- 拥有者
const.WEBSITE_USER_ROLE_MANAGER="管理员" -- 管理员
const.WEBSITE_USER_ROLE_NORMAL="成员"    -- 普通用户
const.WEBSITE_USER_ROLE_VISITOR="访客"    -- 访客

-- 优先级
const.RECORD_LEVEL_STEP = 5              -- 间隔
const.RECORD_LEVEL_HIGH = 10000          -- 高优先级
const.RECORD_LEVEL_MIDDLE = 1000         -- 中优先级
const.RECORD_LEVEL_LOW = 100             -- 低优先级

-- 用户动态类型常量
const.USER_TRENDS_TYPE_CREATE_SITE = 0
const.USER_TRENDS_TYPE_UPDATE_SITE = 1
const.USER_TRENDS_TYPE_DELETE_SITE = 2
const.USER_TRENDS_TYPE_FAVORITE_SITE = 3
const.USER_TRENDS_TYPE_UNFAVORITE_SITE = 4
const.USER_TRENDS_TYPE_ATTENT_USER = 10
const.USER_TRENDS_TYPE_CANCEL_ATTENT_USER = 11
const.USER_TRENDS_TYPE_JOIN_ORGANIZATION = 20
const.USER_TRENDS_TYPE_LEAVE_ORGANIZATION = 21

-- 站点类型
const.WEBSITE_TYPE_PERSONAL = 'personal'
const.WEBSITE_TYPE_COMPANY = 'company'
const.WEBSITE_TYPE_ORGANIZATION = 'organization'
const.WEBSITE_TYPE_GAME = 'game'

-- 数据源类型
const.DATA_SOURCE_TYPE_GITHUB = "github"
const.DATA_SOURCE_TYPE_GITLAB = "gitlab"

-- 站点更新所属类型
const.WEBSITE_RENEWAL_TYPE_PERSONAL = 0
const.WEBSITE_RENEWAL_TYPE_ORGANIZATION = 1

-- 数据源更新标志
const.DATA_SOURCE_UPDATE_FLAG_NO_TRUST = 0  -- webhook 回调填此值
const.DATA_SOURCE_UPDATE_FLAG_TRUST = 1     -- 用户或服务器更新 填此值

-- 用户角色
const.USER_ROLE_EXCEPTION = -1              -- 异常用户
const.USER_ROLE_NORMAL = 0                  -- 普通用户
const.USER_ROLE_SPECIAL = 1                 -- 文件免审核用户
const.USER_ROLE_MANAGER = 8                 -- 管理员
const.USER_ROLE_MANAGER = 9                 -- VIP管理员
const.USER_ROLE_ADMINISTRATOR = 10          -- 超管

-- 大文件自动通过审核白名单角色
const.DONT_CHECK_WHOES_FILES = {
	const.USER_ROLE_NORMAL,
	const.USER_ROLE_SPECIAL,
	const.USER_ROLE_MANAGER,
	const.USER_ROLE_ADMINISTRATOR,
}

-- 站点权限级别
const.SITE_PRIVILEGE_GUEST_LEVEL=10        -- 禁止读写
const.SITE_PRIVILEGE_REPORTER_LEVEL=20     -- 读
const.SITE_PRIVILEGE_DEVELOPER_LEVEL=30    -- 读写
const.SITE_PRIVILEGE_MASTER_LEVEL=40       -- 读写
const.SITE_PRIVILEGE_OWNER_LEVEL=50        -- 

-- 默认数据源名
const.DEFAULT_DATA_SOURCE_NAME="内置gitlab"       -- 默认数据源名
const.DEFAULT_DATA_SOURCE_SITENAME="__keepwork__" -- 默认数据源的站点名
const.DEFAULT_DATA_SOURCE_PROJECT_NAME="keepworkdatasource" -- 默认数据源的项目名

-- 状态
const.SITE_STATE_EXCEPTION=-1 
const.SITE_STATE_NORMAL=0

-- 最大站点数
const.MAX_SITE_NUM = 100   

-- 服务名


-- 大文件存贮渠道
const.BIGFILE_NONE = "none"
const.BIGFILE_QINIU = "qiniu"


-- 敏感词
const.SENSITIVE_WORD_MARKDOWN = 1
const.SENSITIVE_WORD_SITE = 2










